<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-03-26T08:37:34+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tib</title><subtitle>Random code and thoughts</subtitle><entry><title type="html">SlapBirdAPM with Mojolicious</title><link href="http://localhost:4000/2024/08/27/SlapBirdAPM-with-Mojolicious.html" rel="alternate" type="text/html" title="SlapBirdAPM with Mojolicious" /><published>2024-08-27T13:14:25+02:00</published><updated>2024-08-27T13:14:25+02:00</updated><id>http://localhost:4000/2024/08/27/SlapBirdAPM-with-Mojolicious</id><content type="html" xml:base="http://localhost:4000/2024/08/27/SlapBirdAPM-with-Mojolicious.html"><![CDATA[<p>This is my quick walk-through exploration of <a href="https://slapbirdapm.com/">SlapBirdAPM</a> with my Perl web framework of choice (<a href="https://www.mojolicious.org/">Mojolicious</a> of course!)</p>

<h3 id="setup-mojolicious-web-app">Setup Mojolicious Web App</h3>
<p>Install Mojolicious:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cpanm Mojolicious
--&gt; Working on Mojolicious
Fetching http://www.cpan.org/authors/id/S/SR/SRI/Mojolicious-9.38.tar.gz ... OK
Configuring Mojolicious-9.38 ... OK
Building and testing Mojolicious-9.38 ... OK
Successfully installed Mojolicious-9.38 (upgraded from 9.32)
1 distribution installed
</code></pre></div></div>

<p>Generate project:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mkdir webapp
$ cd webapp
$ mojo generate lite-app bird
  [exist] /home/tib/Code/webapp
  [write] /home/tib/Code/webapp/bird
  [chmod] /home/tib/Code/webapp/bird 744
</code></pre></div></div>

<p>Test:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>morbo bird
Web application available at http://127.0.0.1:3000
</code></pre></div></div>

<p>And check in your browser <a href="http://127.0.0.1:3000/">http://127.0.0.1:3000/</a></p>

<h2 id="create-slapbirdapm-account">Create SlapBirdAPM account</h2>
<p>Go visit <a href="https://www.slapbirdapm.com">SlapBirdAPM</a>:
<img src="/assets/images/zn3b9am7io9k3ua5stny.png" alt="Image description" /></p>

<p>Login with GitHub:
<img src="/assets/images/de5jkkbl7e1rvty0ugxe.png" alt="Image description" /></p>

<p>Create new app:
<img src="/assets/images/zv3iq8ghxvrhbomcczmt.png" alt="Image description" /></p>

<p>And get your API Key:
<img src="/assets/images/f1ld3h64t3vxe5s36woz.png" alt="Image description" /></p>

<h2 id="install-slapbirdapm-in-web-app">Install SlapBirdAPM in Web App</h2>
<p>First install Mojolicious plugin:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>cpanm SlapbirdAPM::Agent::Mojo
<span class="nt">--</span><span class="o">&gt;</span> Working on SlapbirdAPM::Agent::Mojo
Fetching http://www.cpan.org/authors/id/R/RA/RAWLEYFOW/SlapbirdAPM-Agent-Mojo-0.005.tar.gz ... OK
Configuring SlapbirdAPM-Agent-Mojo-0.005 ... OK
<span class="o">==&gt;</span> Found dependencies: Const::Fast, System::Info
<span class="nt">--</span><span class="o">&gt;</span> Working on Const::Fast
Fetching http://www.cpan.org/authors/id/L/LE/LEONT/Const-Fast-0.014.tar.gz ... OK
Configuring Const-Fast-0.014 ... OK
Building and testing Const-Fast-0.014 ... OK
Successfully installed Const-Fast-0.014
<span class="nt">--</span><span class="o">&gt;</span> Working on System::Info
Fetching http://www.cpan.org/authors/id/H/HM/HMBRAND/System-Info-0.065.tgz ... OK
Configuring System-Info-0.065 ... OK
Building and testing System-Info-0.065 ... OK
Successfully installed System-Info-0.065
Building and testing SlapbirdAPM-Agent-Mojo-0.005 ... OK
Successfully installed SlapbirdAPM-Agent-Mojo-0.005
3 distributions installed
</code></pre></div></div>

<p>And add <code class="language-plaintext highlighter-rouge">plugin SlapbirdAPM;</code> to your web app.</p>

<p>Our full application now looks like this:</p>
<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nn">Mojolicious::</span><span class="nv">Lite</span> <span class="o">-</span><span class="nv">signatures</span><span class="p">;</span>

<span class="nv">plugin</span> <span class="p">'</span><span class="s1">SlapbirdAPM</span><span class="p">';</span>

<span class="nv">get</span> <span class="p">'</span><span class="s1">/</span><span class="p">'</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">($c) {</span>
  <span class="nv">$c</span><span class="o">-&gt;</span><span class="nv">render</span><span class="p">(</span><span class="s">template</span> <span class="o">=&gt;</span> <span class="p">'</span><span class="s1">index</span><span class="p">');</span>
<span class="p">};</span>

<span class="nv">app</span><span class="o">-&gt;</span><span class="nv">start</span><span class="p">;</span>
<span class="cp">__DATA__

@@ index.html.ep
% layout 'default';
% title 'Welcome';
&lt;h1&gt;Welcome to the Mojolicious real-time web framework!&lt;/h1&gt;

@@ layouts/default.html.ep
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;&lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;&lt;/head&gt;
  &lt;body&gt;&lt;%= content %&gt;&lt;/body&gt;
&lt;/html&gt;
</span></code></pre></div></div>

<h2 id="test">Test!</h2>
<p>Let’s restart the application with the plugin and an API Key:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ export SLAPBIRDAPM_API_KEY=01ABCDEFGHIJKLMNOPKtest-app &amp;&amp; morbo bird
Web application available at http://127.0.0.1:3000
[2024-08-27 11:33:27.51107] [8402] [info] Slapbird configured and active on this application.
</code></pre></div></div>

<p>Use your favorite browser to browse <a href="http://127.0.0.1:3000">http://127.0.0.1:3000</a> or <code class="language-plaintext highlighter-rouge">curl http://127.0.0.1:3000</code>.</p>

<p>Your activity will immediately reflect in your SlapBirdAPM portal 
<img src="/assets/images/a3mxp69pekqyvglnqu5p.png" alt="Image description" /></p>

<h2 id="were-done-grinning">We’re done! :grinning:</h2>]]></content><author><name></name></author><summary type="html"><![CDATA[This is my quick walk-through exploration of SlapBirdAPM with my Perl web framework of choice (Mojolicious of course!) Setup Mojolicious Web App Install Mojolicious: $ cpanm Mojolicious --&gt; Working on Mojolicious Fetching http://www.cpan.org/authors/id/S/SR/SRI/Mojolicious-9.38.tar.gz ... OK Configuring Mojolicious-9.38 ... OK Building and testing Mojolicious-9.38 ... OK Successfully installed Mojolicious-9.38 (upgraded from 9.32) 1 distribution installed]]></summary></entry><entry><title type="html">3 original Perl CPAN social concepts</title><link href="http://localhost:4000/2024/08/23/3-original-Perl-CPAN-social-concepts.html" rel="alternate" type="text/html" title="3 original Perl CPAN social concepts" /><published>2024-08-23T13:00:30+02:00</published><updated>2024-08-23T13:00:30+02:00</updated><id>http://localhost:4000/2024/08/23/3-original-Perl-CPAN-social-concepts</id><content type="html" xml:base="http://localhost:4000/2024/08/23/3-original-Perl-CPAN-social-concepts.html"><![CDATA[<p>(Picture from <a href="https://www.pexels.com/fr-fr/@eren-li/">Eren Li</a>)</p>

<h2 id="cpan-lieutenants">CPAN Lieutenants</h2>
<p><img src="/assets/images/p00z9ilo7aj6ch6dak10.jpg" alt="Man army" />
(Picture from <a href="https://www.pexels.com/fr-fr/@alex-andrews-271121/">Alex Andrews</a>)</p>

<p>I often mentally represent modules “per namespace” (I explained it <a href="https://dev.to/thibaultduponchelle/browse-cpan-modules-per-namespaces-6p">here</a>) like in a tree where we have a node “JSON” that contains all JSON related (<code class="language-plaintext highlighter-rouge">JSON:PP</code>, <code class="language-plaintext highlighter-rouge">JSON:XS</code>, etc…).</p>

<p>I know it’s partially wrong, there’s no such “order” and for instance <code class="language-plaintext highlighter-rouge">Cpanel::JSON::XS</code> is out of this hierarchy but still well a JSON thing. But most of the time, this mental model works.</p>

<p>If we care about the quality of the ecosystem, we should try to find a solution to <em>fight the CPAN inertia</em>.</p>

<p>Some important modules can be considered a bit a “common good” (is it wrong to think like this?) but we need also to respect the ownership and copyright.</p>

<p>So here is the concept of CPAN Lieutenants.</p>

<p>For some very specific cases (e.g. a module does not install at all), I think we should be able to “force apply” a patch to a module. 
Boundaries should be clear:</p>
<ol>
  <li>Purpose is to fix a broken module</li>
  <li>Fix is relatively simple (to review), blocker is about releasing it</li>
</ol>

<p>In practice, it would mean to let few trusted members to manage a dedicated <strong>sub-tree</strong> of CPAN namespaces. And in extreme case, after some formal review, discussion and notifications, these people would be able to <strong>push</strong> a fix to CPAN (= publish a new release).</p>

<p>It would be a bit like these people, thanks to their trust and expertise, have implicit co-maintainer rights (<code class="language-plaintext highlighter-rouge">CO-MAINT</code> in CPAN jargon) on a topic (e.g. “Alien” modules, or “XML”).</p>

<p>It won’t imply these “lieutenants” to maintain these modules neither the ceremonial of asking (and eventually being refused) co-maintainer permissions. And don’t hear what I did not say: I do not criticize PAUSE operating model for that.</p>

<p>The name is inspired from Linux kernel development with “lieutenants” that have responsibility on sub parts of the kernel.</p>

<p>Also we need to respect authors and their rights. It’s a matter of finding the right balance so everybody wins. That’s why we should be careful with boundaries and rules (e.g. a minimum number of lieutenants approvals), the same way PAUSE admins are careful with module ownership.</p>

<p>If it proves to be incompatible with license, we could consider a layer of patches, inspired by what do several Linux distributions (see for instance <code class="language-plaintext highlighter-rouge">Locally applied patches:</code> section under Debian/Ubuntu <code class="language-plaintext highlighter-rouge">perl -V</code>).</p>

<p>It proved to work (for inertia and licensing) but I would prefer to avoid this, first because it’s generally considered good practice “to push patch upstream” when possible, also because it would add complexity and “yet another layer of patches”:</p>
<ul>
  <li>CPAN release contains base delivery</li>
  <li>GitHub locally applied patches (merged commits in GitHub that never reached CPAN)</li>
  <li>CPAN locally applied patches :warning:</li>
  <li>OS Distribution locally applied patches</li>
</ul>

<p>But on the other hand, the CPAN local patch layer approach has advantage of managing the storage of patch (since <em>inertia</em> very likely also concerns code forge…)</p>

<p>I don’t know the exact solution, but I think there’s something to do :smile:</p>

<p>Actually, a recent discussion on <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2024/08/msg268685.html">perl development mailing list</a> (“p5p”) has highlighted the same need and discussed some close proposals. I swear I did not copied! :grinning: But it decided me to post this!</p>

<p><strong>edit 1</strong>: a CPAN module security vulnerability is also a valid reason to want this and I see that CPANSec folks have similar concern, see <a href="https://github.com/orgs/CPAN-Security/projects/11/views/1">CPAN Security Patch Tooling</a></p>

<p><strong>edit 2</strong>: <a href="https://perldoc.perl.org/perlpolicy#A-Social-Contract-about-Artistic-Control">A Social Contract about Artistic Control</a> - perl core statement (applies to modules added to perl core distribution)</p>

<p><strong>edit 3</strong>: <a href="https://metacpan.org/pod/CPAN#Configuration-for-individual-distributions-(Distroprefs)">DistroPrefs</a> - CPAN.pm patching facility</p>

<h2 id="cpan-mentors">CPAN Mentors</h2>
<p><img src="/assets/images/https3a2f2fdev-to-uploadss3amazonawscom2fuploads2farticles2fktrqmr6iufz7fe1jd9jm.jpg" alt="Helping blind" /></p>

<p>(Picture from <a href="https://www.pexels.com/@thirdman/">Thirdman</a>)</p>

<p>I think <a href="https://dev.to/thibaultduponchelle/the-difficult-road-to-perl-3o5f">the barrier of entry of Perl is high</a> but with a compatible mindset, once someone get in, Perl (and CPAN) produces often long time involved members.</p>

<p>These days, there’s no so much new entrants to the CPAN.</p>

<p>We should optimize for retention (and unity).</p>

<p>The idea of CPAN Mentors is to offer help to newcomers, once they pass the entry door, something that we can monitor from <a href="https://www.nntp.perl.org/group/perl.modules/">perl modules mailing list</a></p>

<p>Let’s say after 3 weeks, if a new CPAN AUTHOR has not published any module, someone can drop a little mail:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello new CPAN AUTHOR,

I noticed you recently registered to PAUSE/CPAN, congratulation for this.
I also noticed that you did not publish any module, yet.
I don't know your level of expertise,
maybe you would benefit from some guidance?
I'm reaching you to kindly offer my help :) 
Feel free to ask me questions or we can maybe even accommodate some pairing via a call.

Regards.

Tib
</code></pre></div></div>

<p>I think the number of new monthly CPAN registrations would permit it, and reinforce the community feeling that always been a strength of Perl.</p>

<h2 id="cpan-guards">CPAN Guards</h2>
<p><img src="/assets/images/fkwc4tis671ums68rb0z.jpg" alt="Guard" />
(Picture from <a href="https://www.pexels.com/@wdnet/">PhotoMix Company</a>)</p>

<p>This concept joins actually a bit the CPAN Lieutenants concept.</p>

<p>The idea is to watch (and contribute to) a limited set of critical modules (depended by several modules or in Perl jargon: those high in the <a href="http://neilb.org/2015/12/22/cpan-river-water-quality.html">CPAN river</a>) and help keeping  them in good quality and portable.</p>

<p>This is actually not a new concept (forgive me the “original” in title), some people (CPANTesters and perl core developers) are already on it (see for instance <a href="https://www.nntp.perl.org/group/perl.qa/2017/03/msg13747.html">BBC and CPAN River 5000</a>).</p>

<p>So it’s more about formalizing this under a fancy name.</p>

<p>CPAN Guards concept fits well the Perl folks that are more contributors than maintainers and prefer to jump often from modules to modules.</p>

<p>At some point it’s also related to the <a href="https://www.perl.com/pub/2005/01/13/phalanx.html/">Perl Phalanx initiative</a> (more focused on tests)</p>

<h2 id="some-reading-and-watching">Some reading and watching</h2>
<ul>
  <li><a href="https://blogs.perl.org/users/brendan_byrd/2013/03/the-four-major-problems-with-cpan.html">The Four Major Problems with CPAN</a></li>
  <li><a href="https://blogs.perl.org/users/neilb/2013/03/dont-release-experiments-to-cpan.html">Don’t release experiments to CPAN</a></li>
  <li><a href="https://qa.perl.org/phalanx/">Perl Phalanx Project</a></li>
  <li><a href="https://www.perl.com/pub/2005/01/13/phalanx.html/">What is Perl Phalanx Project</a></li>
  <li><a href="https://www.nntp.perl.org/group/perl.qa/2017/03/msg13747.html">BBC testing from upriver downwards</a></li>
  <li><a href="https://www.youtube.com/watch?v=9J_9WQ_haDs">Whither Perl? - Olaf Alders - TPRC 2023</a></li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[(Picture from Eren Li)]]></summary></entry><entry><title type="html">3 original Perl CPAN social concepts</title><link href="http://localhost:4000/2024/08/23/original-Perl-CPAN-social-concepts.html" rel="alternate" type="text/html" title="3 original Perl CPAN social concepts" /><published>2024-08-23T13:00:30+02:00</published><updated>2024-08-23T13:00:30+02:00</updated><id>http://localhost:4000/2024/08/23/original-Perl-CPAN-social-concepts</id><content type="html" xml:base="http://localhost:4000/2024/08/23/original-Perl-CPAN-social-concepts.html"><![CDATA[<p>(Picture from <a href="https://www.pexels.com/fr-fr/@eren-li/">Eren Li</a>)</p>

<h2 id="cpan-lieutenants">CPAN Lieutenants</h2>
<p><img src="/assets/images/p00z9ilo7aj6ch6dak10.jpg" alt="Man army" />
(Picture from <a href="https://www.pexels.com/fr-fr/@alex-andrews-271121/">Alex Andrews</a>)</p>

<p>I often mentally represent modules “per namespace” (I explained it <a href="https://dev.to/thibaultduponchelle/browse-cpan-modules-per-namespaces-6p">here</a>) like in a tree where we have a node “JSON” that contains all JSON related (<code class="language-plaintext highlighter-rouge">JSON:PP</code>, <code class="language-plaintext highlighter-rouge">JSON:XS</code>, etc…).</p>

<p>I know it’s partially wrong, there’s no such “order” and for instance <code class="language-plaintext highlighter-rouge">Cpanel::JSON::XS</code> is out of this hierarchy but still well a JSON thing. But most of the time, this mental model works.</p>

<p>If we care about the quality of the ecosystem, we should try to find a solution to <em>fight the CPAN inertia</em>.</p>

<p>Some important modules can be considered a bit a “common good” (is it wrong to think like this?) but we need also to respect the ownership and copyright.</p>

<p>So here is the concept of CPAN Lieutenants.</p>

<p>For some very specific cases (e.g. a module does not install at all), I think we should be able to “force apply” a patch to a module. 
Boundaries should be clear:</p>
<ol>
  <li>Purpose is to fix a broken module</li>
  <li>Fix is relatively simple (to review), blocker is about releasing it</li>
</ol>

<p>In practice, it would mean to let few trusted members to manage a dedicated <strong>sub-tree</strong> of CPAN namespaces. And in extreme case, after some formal review, discussion and notifications, these people would be able to <strong>push</strong> a fix to CPAN (= publish a new release).</p>

<p>It would be a bit like these people, thanks to their trust and expertise, have implicit co-maintainer rights (<code class="language-plaintext highlighter-rouge">CO-MAINT</code> in CPAN jargon) on a topic (e.g. “Alien” modules, or “XML”).</p>

<p>It won’t imply these “lieutenants” to maintain these modules neither the ceremonial of asking (and eventually being refused) co-maintainer permissions. And don’t hear what I did not say: I do not criticize PAUSE operating model for that.</p>

<p>The name is inspired from Linux kernel development with “lieutenants” that have responsibility on sub parts of the kernel.</p>

<p>Also we need to respect authors and their rights. It’s a matter of finding the right balance so everybody wins. That’s why we should be careful with boundaries and rules (e.g. a minimum number of lieutenants approvals), the same way PAUSE admins are careful with module ownership.</p>

<p>If it proves to be incompatible with license, we could consider a layer of patches, inspired by what do several Linux distributions (see for instance <code class="language-plaintext highlighter-rouge">Locally applied patches:</code> section under Debian/Ubuntu <code class="language-plaintext highlighter-rouge">perl -V</code>).</p>

<p>It proved to work (for inertia and licensing) but I would prefer to avoid this, first because it’s generally considered good practice “to push patch upstream” when possible, also because it would add complexity and “yet another layer of patches”:</p>
<ul>
  <li>CPAN release contains base delivery</li>
  <li>GitHub locally applied patches (merged commits in GitHub that never reached CPAN)</li>
  <li>CPAN locally applied patches :warning:</li>
  <li>OS Distribution locally applied patches</li>
</ul>

<p>But on the other hand, the CPAN local patch layer approach has advantage of managing the storage of patch (since <em>inertia</em> very likely also concerns code forge…)</p>

<p>I don’t know the exact solution, but I think there’s something to do :smile:</p>

<p>Actually, a recent discussion on <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2024/08/msg268685.html">perl development mailing list</a> (“p5p”) has highlighted the same need and discussed some close proposals. I swear I did not copied! :grinning: But it decided me to post this!</p>

<p><strong>edit 1</strong>: a CPAN module security vulnerability is also a valid reason to want this and I see that CPANSec folks have similar concern, see <a href="https://github.com/orgs/CPAN-Security/projects/11/views/1">CPAN Security Patch Tooling</a></p>

<p><strong>edit 2</strong>: <a href="https://perldoc.perl.org/perlpolicy#A-Social-Contract-about-Artistic-Control">A Social Contract about Artistic Control</a> - perl core statement (applies to modules added to perl core distribution)</p>

<p><strong>edit 3</strong>: <a href="https://metacpan.org/pod/CPAN#Configuration-for-individual-distributions-(Distroprefs)">DistroPrefs</a> - CPAN.pm patching facility</p>

<h2 id="cpan-mentors">CPAN Mentors</h2>
<p><img src="/assets/images/https3a2f2fdev-to-uploadss3amazonawscom2fuploads2farticles2fktrqmr6iufz7fe1jd9jm.jpg" alt="Helping blind" /></p>

<p>(Picture from <a href="https://www.pexels.com/@thirdman/">Thirdman</a>)</p>

<p>I think <a href="https://dev.to/thibaultduponchelle/the-difficult-road-to-perl-3o5f">the barrier of entry of Perl is high</a> but with a compatible mindset, once someone get in, Perl (and CPAN) produces often long time involved members.</p>

<p>These days, there’s no so much new entrants to the CPAN.</p>

<p>We should optimize for retention (and unity).</p>

<p>The idea of CPAN Mentors is to offer help to newcomers, once they pass the entry door, something that we can monitor from <a href="https://www.nntp.perl.org/group/perl.modules/">perl modules mailing list</a></p>

<p>Let’s say after 3 weeks, if a new CPAN AUTHOR has not published any module, someone can drop a little mail:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello new CPAN AUTHOR,

I noticed you recently registered to PAUSE/CPAN, congratulation for this.
I also noticed that you did not publish any module, yet.
I don't know your level of expertise,
maybe you would benefit from some guidance?
I'm reaching you to kindly offer my help :) 
Feel free to ask me questions or we can maybe even accommodate some pairing via a call.

Regards.

Tib
</code></pre></div></div>

<p>I think the number of new monthly CPAN registrations would permit it, and reinforce the community feeling that always been a strength of Perl.</p>

<h2 id="cpan-guards">CPAN Guards</h2>
<p><img src="/assets/images/fkwc4tis671ums68rb0z.jpg" alt="Guard" />
(Picture from <a href="https://www.pexels.com/@wdnet/">PhotoMix Company</a>)</p>

<p>This concept joins actually a bit the CPAN Lieutenants concept.</p>

<p>The idea is to watch (and contribute to) a limited set of critical modules (depended by several modules or in Perl jargon: those high in the <a href="http://neilb.org/2015/12/22/cpan-river-water-quality.html">CPAN river</a>) and help keeping  them in good quality and portable.</p>

<p>This is actually not a new concept (forgive me the “original” in title), some people (CPANTesters and perl core developers) are already on it (see for instance <a href="https://www.nntp.perl.org/group/perl.qa/2017/03/msg13747.html">BBC and CPAN River 5000</a>).</p>

<p>So it’s more about formalizing this under a fancy name.</p>

<p>CPAN Guards concept fits well the Perl folks that are more contributors than maintainers and prefer to jump often from modules to modules.</p>

<p>At some point it’s also related to the <a href="https://www.perl.com/pub/2005/01/13/phalanx.html/">Perl Phalanx initiative</a> (more focused on tests)</p>

<h2 id="some-reading-and-watching">Some reading and watching</h2>
<ul>
  <li><a href="https://blogs.perl.org/users/brendan_byrd/2013/03/the-four-major-problems-with-cpan.html">The Four Major Problems with CPAN</a></li>
  <li><a href="https://blogs.perl.org/users/neilb/2013/03/dont-release-experiments-to-cpan.html">Don’t release experiments to CPAN</a></li>
  <li><a href="https://qa.perl.org/phalanx/">Perl Phalanx Project</a></li>
  <li><a href="https://www.perl.com/pub/2005/01/13/phalanx.html/">What is Perl Phalanx Project</a></li>
  <li><a href="https://www.nntp.perl.org/group/perl.qa/2017/03/msg13747.html">BBC testing from upriver downwards</a></li>
  <li><a href="https://www.youtube.com/watch?v=9J_9WQ_haDs">Whither Perl? - Olaf Alders - TPRC 2023</a></li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[(Picture from Eren Li)]]></summary></entry><entry><title type="html">The perl.fish experiment</title><link href="http://localhost:4000/2024/08/22/The-perl.fish-experiment.html" rel="alternate" type="text/html" title="The perl.fish experiment" /><published>2024-08-22T10:06:37+02:00</published><updated>2024-08-22T10:06:37+02:00</updated><id>http://localhost:4000/2024/08/22/The-perl.fish-experiment</id><content type="html" xml:base="http://localhost:4000/2024/08/22/The-perl.fish-experiment.html"><![CDATA[<p>(Picture from <a href="https://www.pexels.com/@chokniti-khongchum-1197604/">Chokniti Khongchum</a>)</p>

<p>I like <a href="https://pages.github.com/">GitHub Pages</a>, it provides a nice little and simple free hosting. I also like their <a href="https://en.wikipedia.org/wiki/Static_site_generator">static site generators</a> (SSG) companions:</p>
<ul>
  <li><a href="https://gohugo.io/">Hugo</a> - used by example for <a href="https://perl.com">perl.com</a> (<a href="https://github.com/perladvent/perldotcom">source</a>)</li>
  <li><a href="https://jekyllrb.com/">Jekyll</a> - that I used for <a href="https://thibaultduponchelle.github.io/the-ephemeral-miniconf/">The ephemeral miniconf</a> (<a href="https://github.com/thibaultduponchelle/the-ephemeral-miniconf">source</a>)</li>
</ul>

<p>About 3 years ago, I spent some time experimenting with more advanced Hugo and Jekyll concepts (<a href="https://jekyllrb.com/docs/variables/">variables</a>, <a href="https://jekyllrb.com/docs/configuration/">config</a>, <a href="https://jekyllrb.com/docs/layouts/">layouts</a>, <a href="https://jekyllrb.com/docs/includes/">includes</a>, …).</p>

<p>I wanted to produce a modular website with content separated from a complex structure, using parameterized includes.</p>

<p>The experiment also contained a commenting system powered by GitHub issues (yes!) along with a blog (it’s Jekyll after all!). 
I used this effort to compare Hugo and Jekyll features (Jekyll won for me). 
Then I continued by adding some content, syntax highlighting and various other things…</p>

<p>But why I tagged this post with <code class="language-plaintext highlighter-rouge">#perl</code> tag?</p>

<p>Because ultimately the website content is about Perl, with some generic informations and links that I tried to present in a bit “catchy” way.</p>

<p>After some time, I let this website aging somewhere in my GitHub private space.</p>

<p>Nobody asked for it, but this is finally it!</p>

<h1 id="fish-perlfish-tropical_fish">:fish: <a href="https://perl.fish/">perl.fish</a> :tropical_fish:</h1>

<p>It’s public but I have zero plan for this.</p>

<p>And about the name “perl-dot-fish”, I doubt I can give any explanation except that I consider that “it sounds good”.</p>

<h1 id="a-little-preview">A little preview</h1>

<p>For the very most lazy :grinning:, here is a little preview:
<img src="/assets/images/pmatdwqiqg7m2zr382pl.png" alt="Perl Fish Index" /></p>

<p>It’s also looking good on mobile.</p>

<p><img src="/assets/images/l52h2zuu8dguv3peg846.png" alt="Perl Fish Mobile" /></p>

<p>Note: for the design skeleton, I started from <a href="https://www.rust-lang.org/">rust-lang.org</a> (license permits it), but it now has well diverged.</p>

<h2 id="about-the-stack">About the stack</h2>
<ul>
  <li>Registry: <a href="https://www.identity.digital/">Identity Digital</a> for the <code class="language-plaintext highlighter-rouge">.fish</code> (I wanted to pick a not so common nTLD)</li>
  <li>Registrar: <a href="https://www.ovhcloud.com">OVH</a></li>
  <li>DNS: <a href="https://www.ovhcloud.com">OVH</a></li>
  <li>Hosting: <a href="https://pages.github.com/">GitHub Pages</a></li>
  <li>Framework: <a href="https://jekyllrb.com/">Jekyll</a> (SSG)</li>
</ul>

<p>I built using Jekyll <a href="https://jekyllrb.com/docs/includes/">parameterized includes</a>, to me it makes it both modular and a bit inelegant :grinning: 
Website is easy to edit and the GitHub Pages setup <a href="https://github.com/thibaultduponchelle/perlfish/actions">deploys on commit</a>.</p>

<p>Read the source at <a href="https://github.com/thibaultduponchelle/perlfish">perlfish</a></p>

<p>It’s and experiment, probably running for about a year.</p>

<h3 id="fish-perlfish-tropical_fish-1">:fish: <a href="https://perl.fish">perl.fish</a> :tropical_fish:</h3>]]></content><author><name></name></author><summary type="html"><![CDATA[(Picture from Chokniti Khongchum)]]></summary></entry><entry><title type="html">Installing CPAN modules from git</title><link href="http://localhost:4000/2024/05/21/Installing-CPAN-modules-from-git.html" rel="alternate" type="text/html" title="Installing CPAN modules from git" /><published>2024-05-21T20:18:32+02:00</published><updated>2024-05-21T20:18:32+02:00</updated><id>http://localhost:4000/2024/05/21/Installing-CPAN-modules-from-git</id><content type="html" xml:base="http://localhost:4000/2024/05/21/Installing-CPAN-modules-from-git.html"><![CDATA[<p>(picture from <a href="https://www.pexels.com/fr-fr/@elevate/">elevate</a>)</p>

<p>For various reasons, you might want to install CPAN modules from a git repository.</p>

<p>It can be because somehow a git repository is in advance against CPAN:</p>
<ul>
  <li>A fix was merged in official git repository but never released to CPAN</li>
  <li>A branch or a fork contains some valuable changes (this <em>very-little-but-absolutely-needed</em> fix)</li>
</ul>

<p>Or it can be because the modules are actually not in CPAN: not public and not in a alternative/private CPAN (see Addendum) or simply they are only “experiments”</p>

<p>But this post is not meant to discuss about the “why” but instead mainly share technically the “how” you could do that :grinning:</p>

<p>I tested various syntax and installers and will share now some working examples.</p>

<p>:point_up: Before we continue, be sure to upgrade your installers (<code class="language-plaintext highlighter-rouge">App::cpm</code> and <code class="language-plaintext highlighter-rouge">App::cpanminus</code>) to their latest</p>

<h2 id="installing-from-command-line-with-cpm">Installing from command line with <code class="language-plaintext highlighter-rouge">cpm</code></h2>
<p>Installing with <code class="language-plaintext highlighter-rouge">cpm</code> is straighforward:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>cpm <span class="nb">install </span>https://github.com/plack/Plack.git <span class="nt">--verbose</span>
33257 DONE fetch     <span class="o">(</span>0.971sec<span class="o">)</span> https://github.com/plack/Plack.git
33257 DONE configure <span class="o">(</span>0.033sec<span class="o">)</span> https://github.com/plack/Plack.git
33257 DONE resolve   <span class="o">(</span>0.031sec<span class="o">)</span> Clone -&gt; Clone-0.46 <span class="o">(</span>from MetaDB<span class="o">)</span>
...
33257 DONE <span class="nb">install</span>   <span class="o">(</span>0.364sec<span class="o">)</span> URI-5.28
33257 DONE <span class="nb">install</span>   <span class="o">(</span>0.046sec<span class="o">)</span> https://github.com/plack/Plack.git
31 distributions installed.
</code></pre></div></div>

<p>It can also work the same with ssh <code class="language-plaintext highlighter-rouge">git@github.com:plack/Plack.git</code>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>cpm <span class="nb">install </span>git@github.com:plack/Plack.git <span class="nt">--verbose</span>
64383 DONE fetch     <span class="o">(</span>2.498sec<span class="o">)</span> git@github.com:plack/Plack.git
64383 DONE configure <span class="o">(</span>0.039sec<span class="o">)</span> git@github.com:plack/Plack.git
...
64383 DONE <span class="nb">install</span>   <span class="o">(</span>0.045sec<span class="o">)</span> git@github.com:plack/Plack.git
31 distributions installed.
</code></pre></div></div>

<h2 id="installing-from-command-line-with-cpanminus">Installing from command line with <code class="language-plaintext highlighter-rouge">cpanminus</code></h2>
<p>Installing with <code class="language-plaintext highlighter-rouge">cpanm</code> is not harder:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>cpanm https://github.com/plack/Plack.git
Cloning https://github.com/plack/Plack.git ... OK
<span class="nt">--</span><span class="o">&gt;</span> Working on https://github.com/plack/Plack.git
...
Building and testing Plack-1.0051 ... OK
Successfully installed Plack-1.0051
45 distributions installed
</code></pre></div></div>

<h2 id="installing-from-cpanfile">Installing from <code class="language-plaintext highlighter-rouge">cpanfile</code></h2>
<p>The correct syntax is the following (thank you @haarg):</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>requires <span class="s1">'Plack'</span>, git <span class="o">=&gt;</span> <span class="s1">'https://github.com/plack/Plack.git'</span>, ref <span class="o">=&gt;</span> <span class="s1">'master'</span><span class="p">;</span>
</code></pre></div></div>
<p>(<code class="language-plaintext highlighter-rouge">ref =&gt; 'master'</code> is optional)</p>

<p>And it would just work later with <code class="language-plaintext highlighter-rouge">cpm</code>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>cpm <span class="nb">install</span> <span class="nt">--verbose</span>
Loading requirements from cpanfile...
33257 DONE fetch     <span class="o">(</span>0.971sec<span class="o">)</span> https://github.com/plack/Plack.git
33257 DONE configure <span class="o">(</span>0.033sec<span class="o">)</span> https://github.com/plack/Plack.git
33257 DONE resolve   <span class="o">(</span>0.031sec<span class="o">)</span> Clone -&gt; Clone-0.46 <span class="o">(</span>from MetaDB<span class="o">)</span>
...
33257 DONE <span class="nb">install</span>   <span class="o">(</span>0.364sec<span class="o">)</span> URI-5.28
33257 DONE <span class="nb">install</span>   <span class="o">(</span>0.046sec<span class="o">)</span> https://github.com/plack/Plack.git
31 distributions installed.
</code></pre></div></div>
<p>:warning: Despite being a <code class="language-plaintext highlighter-rouge">cpanfile</code>, please note the use of <code class="language-plaintext highlighter-rouge">cpm</code></p>

<h2 id="installing-from-cpmfile">Installing from <code class="language-plaintext highlighter-rouge">cpmfile</code></h2>
<p>Let’s write our first <a href="https://github.com/skaji/cpmfile">cpmfile</a>  and save it as <code class="language-plaintext highlighter-rouge">cpm.yml</code>:</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">prereqs</span><span class="pi">:</span>
  <span class="na">runtime</span><span class="pi">:</span>
    <span class="na">requires</span><span class="pi">:</span>
      <span class="na">Plack</span><span class="pi">:</span>
        <span class="na">git</span><span class="pi">:</span> <span class="s">https://github.com/plack/Plack.git</span>
        <span class="na">ref</span><span class="pi">:</span> <span class="s">master</span>
</code></pre></div></div>

<p>And then it would just work with <code class="language-plaintext highlighter-rouge">cpm</code>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>cpm <span class="nb">install</span> <span class="nt">--verbose</span>
Loading requirements from cpm.yml...
66419 DONE resolve   <span class="o">(</span>0.000sec<span class="o">)</span> Plack -&gt; https://github.com/plack/Plack.git@master <span class="o">(</span>from Custom<span class="o">)</span>
66419 DONE fetch     <span class="o">(</span>1.695sec<span class="o">)</span> https://github.com/plack/Plack.git
66419 DONE configure <span class="o">(</span>0.034sec<span class="o">)</span> https://github.com/plack/Plack.git
...
66419 DONE <span class="nb">install</span>   <span class="o">(</span>0.023sec<span class="o">)</span> https://github.com/plack/Plack.git
31 distributions installed.
</code></pre></div></div>

<h2 id="beware-of-incomplete-repositories">Beware of “incomplete” repositories</h2>
<p>Releases on CPAN are standardized and generally contain what is needed for installers, but distributions living in git repositories are more for development and very often not in a “ready to install” state.</p>

<p>(thank you @karenetheridge)</p>

<p>There’s some limitations that you can encounter:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">cpm</code> would refuse to install if no META file is found (but <code class="language-plaintext highlighter-rouge">cpanm</code> would be OK with that)</li>
  <li><code class="language-plaintext highlighter-rouge">cpm</code> would refuse to install if no <code class="language-plaintext highlighter-rouge">Makefile.PL</code> nor <code class="language-plaintext highlighter-rouge">Build.PL</code> is found, except if <a href="https://blogs.perl.org/users/shoichi_kaji1/2017/03/make-your-cpan-module-static-installable.html">x_static_install: 1</a> is declared in META (<code class="language-plaintext highlighter-rouge">cpanm</code> would still refuse)</li>
</ul>

<p>Should I mention the repositories with only a <code class="language-plaintext highlighter-rouge">dist.ini</code>? (used by authors to generate everything else)</p>

<p>And you would get similar trouble with distributions using <code class="language-plaintext highlighter-rouge">Module::Install</code> but having not versioned it.</p>

<h2 id="conclusion">Conclusion</h2>
<p>You should probably not rely too much on “install from git” method but still, it can provide an handy way to install modules to test fixes or experiments.</p>

<p>And now with this post you should have good examples of “how” you can achieve that.</p>

<h1 id="addendum">Addendum</h1>

<h2 id="alternative-cpan">Alternative CPAN</h2>
<p>For alternative/private CPAN, several tools can come to your rescue:</p>
<ul>
  <li><a href="https://metacpan.org/dist/CPAN-Mini/view/bin/minicpan">minicpan</a></li>
  <li><a href="https://metacpan.org/pod/App::opan">opan</a></li>
  <li><a href="https://metacpan.org/pod/OrePAN2">OrePAN2</a></li>
  <li><a href="https://metacpan.org/dist/Pinto/view/bin/pinto">pinto</a></li>
</ul>

<h2 id="what-is-not-working-2024">What is <em>not</em> working (2024)</h2>
<h3 id="cpanm-with-cpanfile">cpanm with cpanfile</h3>
<p>Look at following <code class="language-plaintext highlighter-rouge">cpanfile</code>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>requires <span class="s1">'Plack'</span>, git <span class="o">=&gt;</span> <span class="s1">'https://github.com/plack/Plack.git'</span>, ref <span class="o">=&gt;</span> <span class="s1">'master'</span><span class="p">;</span>
</code></pre></div></div>

<p>It is not well “honored” by <code class="language-plaintext highlighter-rouge">cpanminus</code>.</p>

<h3 id="broken-syntax">Broken syntax</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>requires <span class="s2">"MyExperimental::Module"</span> <span class="o">=&gt;</span> <span class="s2">"git://github.com/lestrrat/p5-MyExperimental-Module.git"</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="resources">Resources</h2>
<p>(some of them are outdated)</p>
<ul>
  <li><a href="https://stackoverflow.com/questions/38603421/is-it-possible-to-require-a-git-repo-in-a-cpanfile-for-cpanm">Is it possible to require a git repo in a cpanfile for cpanm</a></li>
  <li><a href="https://blogs.perl.org/users/lestrrat/2013/03/the-main-problem-with-cpan-modules-on-github.html">The Main Problem With CPAN Modules On Github</a></li>
  <li><a href="https://github.com/miyagawa/cpanminus/issues/381">Private Git URLs &amp; the –installdeps option</a></li>
  <li><a href="https://github.com/miyagawa/qahack-tokyo/issues/6">cpanfile: support git URL</a></li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[(picture from elevate)]]></summary></entry><entry><title type="html">GitHub Combine Pull Requests… For The Win</title><link href="http://localhost:4000/2023/11/09/GitHub-Combine-Pull-Requests/.-For-The-Win.html" rel="alternate" type="text/html" title="GitHub Combine Pull Requests… For The Win" /><published>2023-11-09T18:03:20+01:00</published><updated>2023-11-09T18:03:20+01:00</updated><id>http://localhost:4000/2023/11/09/GitHub-Combine-Pull-Requests/GitHub-Combine-Pull-Requests...-For-The-Win</id><content type="html" xml:base="http://localhost:4000/2023/11/09/GitHub-Combine-Pull-Requests/.-For-The-Win.html"><![CDATA[<p>Picture from <a href="https://unsplash.com/photos/brown-metal-train-rail-near-rocky-mountain-during-daytime-nShLC-WruxQ">Lance Grandahl</a></p>

<p>In GitHub, whether you want to improve merge velocity, test interdependent changes or setup some sort of releasing model, you could be interested in grouping code changes.</p>

<p>It is called “bundling” or “combining” pull requests.</p>

<p>It allows multiple pull requests to be built and tested together (in CI) and qualified together (e.g. pre-production deployment with shadow traffic).</p>

<p>In order to achieve this easily, you would need some automation. You’re lucky, I’m going to share an elegant solution to solve this.</p>

<p>(before we continue, also think about <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue">GitHub merge queues</a>)</p>

<h2 id="demo">Demo!</h2>
<p>I have 2 pull requests (from forks) targeting <code class="language-plaintext highlighter-rouge">main</code>. They have passed minimal tests running on PR but I now would like to run <em>long</em> and <em>consuming</em> tests together. I also want to check they work well together without merging first one of them to <code class="language-plaintext highlighter-rouge">main</code> (or to a release branch).</p>

<p>My plan for the two following changes is to target the next release <code class="language-plaintext highlighter-rouge">v2.3</code>, so I added a label <code class="language-plaintext highlighter-rouge">v2.3</code> to the pull requests:
<img src="/assets/images/jwq8ug4jdxl7p32ceutm.png" alt="Label v2.3" /></p>

<p>In order to trigger the bundle creation, I create the branch <code class="language-plaintext highlighter-rouge">v2.3</code> from <code class="language-plaintext highlighter-rouge">main</code>
<img src="/assets/images/m80bhb955e05b2bnsfx8.png" alt="Create branch v2.3" /></p>

<p>Once I finished to create branch, it already started to run an action:
<img src="/assets/images/n28c5ymg1baez2cet7n1.png" alt="Combining" /></p>

<p>After seconds, the run is finished:
<img src="/assets/images/1v7p47nqbp32d8qsgedx.png" alt="Combined" /></p>

<p>A new pull requests (targeting <code class="language-plaintext highlighter-rouge">main</code>) appeared: 
<img src="/assets/images/t6ogvak0e4ii2bs6b9dr.png" alt="New PR" /></p>

<p>The pull requests contains well the 2 pull requests changes (and branch <code class="language-plaintext highlighter-rouge">v2.3</code> was updated):
<img src="/assets/images/60k5wz4ak1pb1glpgsz4.png" alt="PR combined contains 2 PRs" /></p>

<p>Later, when the bundled pull request will be merged, the combined pull requests will be automatically merged:
<img src="/assets/images/1zyygr8qzgunxouryffy.png" alt="Remotely merged" /></p>

<h2 id="hello-combine-pull-requests">Hello “combine-pull-requests”</h2>
<p>This magic can happen thanks to the great <a href="https://github.com/bobvanderlinden/combine-pull-requests">combine-pull-requests</a> :tada:</p>

<p>Thank you <a href="https://github.com/bobvanderlinden">Bob van der Linden</a> for this :+1: :rocket:</p>

<p>This GitHub action makes it deadly simple to combine multiple pull requests based on their labels.</p>

<p>My preferred workflow consists in triggering bundle by branch creation (but you can use other events) then push and open a pull request to <code class="language-plaintext highlighter-rouge">main</code>.</p>

<p>I know you want to see the code, please find below my setup:</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Combine</span>
<span class="na">on</span><span class="pi">:</span> <span class="s">create</span>
      
<span class="na">permissions</span><span class="pi">:</span> <span class="s">write-all</span>
      
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">combine</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">$</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">bobvanderlinden/combine-pull-requests@master</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">label</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">repo-token</span><span class="pi">:</span> <span class="s">$</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Push changes</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">ad-m/github-push-action@master</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github_token</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">branch</span><span class="pi">:</span> <span class="s">$</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Create pull request</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">devops-infra/action-pull-request@v0.4.1</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github_token</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">[$]</span><span class="nv"> </span><span class="s">combined!"</span>
          <span class="na">body</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
          <span class="na">source_branch</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">target_branch</span><span class="pi">:</span> <span class="s">main</span>
          <span class="na">template</span><span class="pi">:</span> <span class="s">.github/BUNDLE_TEMPLATE.md</span>
          <span class="na">label</span><span class="pi">:</span> <span class="s2">"</span><span class="s">bundle</span>
</code></pre></div></div>

<p>Then you would probably put your build-test-deployment… at the end of this same workflow.</p>

<p>Or you can leave the responsibility to another workflow. There’s various manners to differentiate the bundle from other pull requests, for instance you can filter the label <code class="language-plaintext highlighter-rouge">bundle</code>.</p>

<p>To give you an example on how you would run/skip a workflow based on PR having the label <code class="language-plaintext highlighter-rouge">bundle</code>:</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">opened</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">run_if</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.event.pull_request.labels.*.name, 'bundle')</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> <span class="s">echo "This is a bundle, run more tests"</span>
</code></pre></div></div>

<h2 id="what-else">What else?</h2>
<p>What if I pushed a new commit to one of the pull request? Just need to delete and recreate branch <code class="language-plaintext highlighter-rouge">v2.3</code>. Same procedure applies if I want to add or remove a pull request from the bundle.</p>

<p>Customize to your needs, you can listen to more events than only <code class="language-plaintext highlighter-rouge">on: create</code> :innocent:</p>

<p>Another great thing with labels is that same pull request can belong to multiple bundles :fire:</p>

<h2 id="conclusion">Conclusion</h2>
<p>You should design tooling and branching model that suits you the best, so maybe this is not for you, but I really like how elegant is this workflow and I needed to share.</p>

<p>I hope you can also find it useful for you.</p>

<p>Then, now it only remains for me to wish you “happy hacking!” :grin:</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Picture from Lance Grandahl]]></summary></entry><entry><title type="html">Perl Advent Calendar</title><link href="http://localhost:4000/2023/11/09/Perl-Advent-Calendar.html" rel="alternate" type="text/html" title="Perl Advent Calendar" /><published>2023-11-09T17:36:36+01:00</published><updated>2023-11-09T17:36:36+01:00</updated><id>http://localhost:4000/2023/11/09/Perl-Advent-Calendar</id><content type="html" xml:base="http://localhost:4000/2023/11/09/Perl-Advent-Calendar.html"><![CDATA[<h2 id="blogging-here-or-there">Blogging here or there</h2>
<p>If in 2023 I did almost no blogging at all, in 2022 I produced a decent number of posts, but not all landed on DevTo!</p>

<p>Late 2022, I helped to make the Perl Advent Calendar tradition to run once again :santa:</p>

<p>2022 be like:
<img src="/assets/images/i4qe59m158rdr780xp1l.jpg" alt="Blog on Devto / Blog on Perl Advent Calendar" /></p>

<p>Believe me, all articles in <a href="https://perladvent.org/2022/index.html">Perl Advent Calendar</a> deserve a read. But let me share mine :grinning:</p>
<ul>
  <li><a href="https://perladvent.org/2022/2022-12-03.html">Santa is On GitHub</a></li>
  <li><a href="https://perladvent.org/2022/2022-12-05.html">Catching Dreams</a></li>
  <li><a href="https://perladvent.org/2022/2022-12-07.html">The Sleigh Odometer</a></li>
  <li><a href="https://perladvent.org/2022/2022-12-10.html">The Christmas Time Machine</a></li>
  <li><a href="https://perladvent.org/2022/2022-12-12.html">The Delivery Map</a></li>
  <li><a href="https://perladvent.org/2022/2022-12-18.html">TWVycnkgQ2hyaXN0bWFzIDop</a></li>
</ul>

<p>This year, I’m not planning to contribute but please give them force and think about <a href="https://github.com/perladvent/Perl-Advent/issues/new?assignees=&amp;labels=article&amp;projects=&amp;template=i-want-to-write-an-article.md&amp;title=">contributing yourself</a>!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Blogging here or there If in 2023 I did almost no blogging at all, in 2022 I produced a decent number of posts, but not all landed on DevTo!]]></summary></entry><entry><title type="html">Open Letter To Tim O’Reilly To Free The Perl Camel</title><link href="http://localhost:4000/2023/07/07/Open-Letter-To-Tim-O-Reilly-To-Free-The-Perl-Camel.html" rel="alternate" type="text/html" title="Open Letter To Tim O’Reilly To Free The Perl Camel" /><published>2023-07-07T14:11:49+02:00</published><updated>2023-07-07T14:11:49+02:00</updated><id>http://localhost:4000/2023/07/07/Open-Letter-To-Tim-O-Reilly-To-Free-The-Perl-Camel</id><content type="html" xml:base="http://localhost:4000/2023/07/07/Open-Letter-To-Tim-O-Reilly-To-Free-The-Perl-Camel.html"><![CDATA[<p>Dear Tim,</p>

<p>I’ve been thinking about this letter for a while now.</p>

<p>There was a time (an eternity in IT age) where you did a lot for Perl and I thank you so much for this :pray:</p>

<p>But time passed and Perl has lost its value to your eyes.</p>

<p>Thanks to you :heart: Perl inherited a logo: the camel 
But because of you, Perl actually never had a logo at all :cry:</p>

<p>Over the years, you never ever made the Perl camel open enough for us (Perl community) to freely use or modify.
Consequently, we are in a very uncomfortable position.</p>

<blockquote>
  <p>Let’s just use a new logo, what’s the point?</p>
</blockquote>

<p>No, it’s not that simple and we were never able to achieve this.</p>

<p>As of today, we are torn between:</p>
<ul>
  <li>Your camel :dromedary_camel: that we are not allowed to use</li>
  <li>A shadowed camel :dromedary_camel: derived from your camel, still problematic even if it’s de facto used everywhere</li>
  <li>An onion :onion: that is not Perl but foundation logo (and not even free to use/modify)</li>
  <li>A raptor :volcano: that some people don’t like or don’t recognize well the association</li>
  <li>Various other attempts</li>
</ul>

<p>It’s a long standing problem with numerous discussions, attempts and continuous frustrations for us.</p>

<p>Now, the thing is, only YOU can fix this :dart:</p>

<p>And it’s time.</p>

<p>So I’m asking solemnly, <strong>free the Perl camel</strong>! :free:
And do it with a nice and clear license.</p>

<p>#FreeThePerlCamel</p>

<p>Please.</p>

<p>Thibault</p>

<p>Notes: it was sent to <code class="language-plaintext highlighter-rouge">permissions@oreilly.com</code></p>

<h2 id="background">Background</h2>
<p>The association of Perl and camel originally comes from <a href="https://www.oreilly.com/library/view/programming-perl-4th/9781449321451/">Programming Perl</a> book. Since then, O’Reilly always protected it with (too much) restrictions and Perl was never able nor wanted to break association.</p>

<p>We talk about this guy:</p>

<p><img src="/assets/images/8cgro7mnpsx5506um5z5.png" alt="The non-free Perl camel" /></p>

<p>…and derivatives!</p>

<p>As far as I know, O’Reilly never enforced restrictions and kept friendly to Perl along all these years.</p>

<h2 id="past-oreilly-position-on-camel">Past O’Reilly position on Camel</h2>
<ul>
  <li><a href="https://web.archive.org/web/20180425080044/http://archive.oreilly.com/pub/a/oreilly/perl/usage">Perl camel usage</a> (webarchive)
<img src="/assets/images/7it49w6as2ztukswo94v.png" alt="Perl Camel usage old" /></li>
</ul>

<blockquote>
  <p>Non-commercial use</p>

  <p>We will license the camel image widely for open source products and non-commercial sites related to Perl, requiring only an acknowledgement of its trademark status and a link to www.perl.com. To request the camel artwork, please send email to permissions@oreilly.com, indicating where, how, and for what purpose you plan to use the image. Please note that we generally do not allow alterations of the Perl camel artwork.</p>
</blockquote>

<p>It sounds free at first but it’s not at all :disappointed:</p>

<p>Also note the following sentence (at the beginning) which sounds particularly rude:</p>

<blockquote>
  <p>After all, the only reason that people think of camels in association with Perl is because we used a camel on the cover of Programming Perl.</p>
</blockquote>

<p>Ouch! The last edition of <a href="https://www.oreilly.com/library/view/programming-perl-4th/9781449321451/">Programming Perl</a> was 11 years ago.</p>

<ul>
  <li>Some clarification in <a href="https://web.archive.org/web/20180123132933/http://archive.oreilly.com/pub/a/oreilly/perl/usage/faq.html">Perl camel FAQ</a> (webarchive)
<img src="/assets/images/7bd7cxa7ks4ek2tx243f.png" alt="Perl Camel FAQ" /></li>
</ul>

<blockquote>
  <p>Q: I want to design a T-shirt with the Perl camel on it. Do I need to get your permission?</p>

  <p>A: Yes. But we’re willing to make allowances for those of you who have creative ideas and want to do something fun for your friends. So, if the lifetime print run of the T-shirt design is less than 100, you may consider permission automatically granted. For larger print runs, please ask first. We promise to answer quickly!</p>

  <p>Q: Why isn’t your trademark just restricted to books?</p>

  <p>A: We also do conferences, software, research, and online publishing in Perl, and we use the camel image for those things as well. We may want to camel-brand other Perl-related products in the future.</p>

  <p>Q: I want to place a picture of a camel on my Perl web page. Am I allowed to do that? Do I have to use your camel?</p>

  <p>A: Yes, as long as your page is non-commercial, and the context in which the camel is placed portrays Perl in a positive light. You will need to include the following language in small text somewhere on the page where the camel appears:</p>

  <p>“The Perl camel image is a trademark of O’Reilly Media, Inc. Used with permission.”</p>

  <p>Please make the “O’Reilly Media, Inc.” part of the statement a link to our home page (http://www.oreilly.com).</p>
</blockquote>

<p>This FAQ sounds terrible to me. It’s “yes but no”, unclear, restrictive…</p>

<p>At least O’Reilly has some sense of humor:</p>
<blockquote>
  <p>Q: I want to use $camel as a variable name in a Perl program. Do I need to acknowledge the trademark?</p>

  <p>A: No.</p>
</blockquote>

<p>Thank you sir, now let’s move one step forward and Free The Perl Camel :wink:</p>

<h2 id="recent-position">Recent position</h2>
<ul>
  <li>From <a href="http://neilb.org/2020/12/04/perl-and-camels.html">Perl and Camels</a>, Tim O’Reilly answered questions from <a href="http://neilb.org/index.html">Neil Bowers</a> (Perl figure and former perl maintainer). Here’s what we can (not) do now:
<img src="/assets/images/1xdu48ck4wa8d3iil0ae.png" alt="Perl Camel usage recent" /></li>
</ul>

<p>It’s even worse :angry:</p>

<p>And what is allowed for shadowed camel?</p>

<p><img src="/assets/images/zwb6shere96l2b8w7iss.png" alt="Shadowed camel is a derivative" /></p>

<p>(It’s a derivative of “specific image of the camel that appears on the cover of the Programming Perl book”)</p>

<h2 id="links">Links</h2>
<ul>
  <li><a href="https://www.perl.org/advocacy/white_camel/2007.html">White camel award 2007</a> - Tim O’Reilly recognized for major contribution to Perl</li>
  <li><a href="https://dev.to/thibaultduponchelle/the-perl-complex-topic-of-logos-3161">The complex topic of Perl logos</a> - Perl logos and licenses (same author)</li>
  <li><a href="http://neilb.org/2020/12/04/perl-and-camels.html">Perl and Camels</a> - Neil Bowers clarified recent O’Reilly position</li>
  <li><a href="https://github.com/ubuntu/yaru/issues/3938">Ticket to change icon in Ubuntu</a> - Living between tastes and licenses</li>
  <li><a href="https://www.oreilly.com/amazon_patent/amazon_patent.comments.html">Tim O’Reilly Open Letter to Jeff Bezos</a> (2000) - “[…] other attempts to limit the use of web technology for private advantage have put the whole software development and standards process into a precarious state.”</li>
  <li><a href="https://www.oreilly.com/pub/pr/949">Tim O’Reilly Open Letter to Microsoft</a> (1998) - “[…] you should follow the lead of companies like O’Reilly […] who are supporting various Open Source communities while finding ways to build commercial added-value products on the open platforms these communities provide.”</li>
  <li><a href="https://github.com/kraih/perl-raptor">Perl raptor</a> - Another Perl logo</li>
  <li><a href="https://www.oreilly.com/library/view/programming-perl-4th/9781449321451/">Programming Perl</a> - Great book</li>
  <li><a href="https://www.oreilly.com/">Oreilly.com</a></li>
  <li><a href="https://github.com/thibaultduponchelle/perlres#books-books">List of Perl books</a> - List books including a lot of O’Reilly references</li>
  <li><a href="https://web.archive.org/web/20180425080044/http://archive.oreilly.com/pub/a/oreilly/perl/usage">Perl camel usage</a> - Old trademark notice</li>
  <li><a href="https://web.archive.org/web/20180123132933/http://archive.oreilly.com/pub/a/oreilly/perl/usage/faq.html">Perl camel FAQ</a> - Old trademark notice FAQ</li>
</ul>

<h2 id="example-of-discussions">Example of discussions</h2>
<ul>
  <li><a href="https://www.reddit.com/r/perl/comments/zyyelx/perls_new_mascot_the_machines_know/">Perl new mascott?</a></li>
  <li><a href="https://www.reddit.com/r/perl/comments/ok809e/official_icon_for_perl_programming_language/">Official icon?</a></li>
  <li><a href="https://www.reddit.com/r/perl/comments/d9ygpf/comment/f1njywx/">Logos […] are legally restricted</a></li>
  <li><a href="https://www.reddit.com/r/perl/comments/n4le8l/why_perls_logo_is_an_onion_which_one_is_the/">Perl has no official logo</a></li>
  <li><a href="https://www.perlmonks.org/?node_id=845773">A logo for Perl</a></li>
  <li><a href="https://www.perlmonks.org/?node_id=741680">Who bestowed the camel to perl?</a></li>
  <li><a href="https://dev.to/smonff/notes-about-the-ongoing-perl-logo-discussion-4c80">Notes about the ongoing Perl logo discussion</a></li>
</ul>

<h2 id="timeline">Timeline</h2>
<ul>
  <li>06/07/2023 - Sent email “A letter to Tim O’Reilly to ask to free the Perl camel” to <code class="language-plaintext highlighter-rouge">permissions@oreilly.com</code></li>
  <li>07/07/2023 - Published blog post</li>
  <li>08/07/2023 - Sent another email to <code class="language-plaintext highlighter-rouge">permissions@oreilly.com</code> on Saturday</li>
  <li>08/07/2023 - I posted on Hacker News and it has hit the front page with 170 votes and 50 comments :fire: - <a href="https://news.ycombinator.com/item?id=36648949">Open Letter to Tim O’Reilly to Free the Perl Camel</a></li>
  <li>10/07/2023 - Sent email to <code class="language-plaintext highlighter-rouge">tim@oreilly.com</code></li>
  <li>14/07/2023 - Got answer by email from O’Reilly</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Dear Tim,]]></summary></entry><entry><title type="html">5 cool Perl/Programming links</title><link href="http://localhost:4000/2022/11/24/5-cool-Perl-Programming-links.html" rel="alternate" type="text/html" title="5 cool Perl/Programming links" /><published>2022-11-24T09:34:45+01:00</published><updated>2022-11-24T09:34:45+01:00</updated><id>http://localhost:4000/2022/11/24/5-cool-Perl-Programming-links</id><content type="html" xml:base="http://localhost:4000/2022/11/24/5-cool-Perl-Programming-links.html"><![CDATA[<h4 id="1-everything-you-ever-wanted-to-know-about-the-perl-ecosystem">1. <a href="https://www.activestate.com/blog/introduction-to-perl-ecosystem/">Everything you ever wanted to know about the Perl ecosystem</a></h4>
<h4 id="2-nicholas-hubbards-posts-perl">2. <a href="https://dev.to/nicholasbhubbard">Nicholas Hubbard’s posts (Perl)</a></h4>
<h4 id="3-php-sadness">3. <a href="http://phpsadness.com/">PHP Sadness</a></h4>
<h4 id="4-perl-advent-calendar-2020">4. <a href="https://perladvent.org">Perl Advent Calendar</a> (<a href="https://perladvent.org/2020/">2020</a>)</h4>
<h4 id="5-faster-than-c">5. <a href="https://beza1e1.tuxen.de/articles/faster_than_C.html">Faster than C</a></h4>

<p>Enjoy! :grinning:</p>]]></content><author><name></name></author><summary type="html"><![CDATA[1. Everything you ever wanted to know about the Perl ecosystem 2. Nicholas Hubbard’s posts (Perl) 3. PHP Sadness 4. Perl Advent Calendar (2020) 5. Faster than C]]></summary></entry><entry><title type="html">5 cool Programming/Management links</title><link href="http://localhost:4000/2022/06/05/5-cool-Programming-Management-links.html" rel="alternate" type="text/html" title="5 cool Programming/Management links" /><published>2022-06-05T18:11:09+02:00</published><updated>2022-06-05T18:11:09+02:00</updated><id>http://localhost:4000/2022/06/05/5-cool-Programming-Management-links</id><content type="html" xml:base="http://localhost:4000/2022/06/05/5-cool-Programming-Management-links.html"><![CDATA[<h4 id="1-hard-to-work-with">1. <a href="https://lethain.com/hard-to-work-with/">Hard to work with</a></h4>
<h4 id="2-we-dont-have-a-staging-environment">2. <a href="https://squeaky.ai/blog/development/why-we-dont-use-a-staging-environment">We don’t have a staging environment</a></h4>
<h4 id="3-about-building-blog-db">3. <a href="https://modfoss.com/building-blogdb.html">About building Blog DB</a></h4>
<h4 id="4-if-you-commit-to-nothing-you-will-be-distracted-by-everything">4. <a href="https://jamesclear.com/mental-toughness-marathon-monks">If you commit to nothing, you will be distracted by everything</a></h4>
<h4 id="5-play-as-a-team">5. <a href="https://critter.blog/2022/04/15/i-know-what-is-expected-of-me-at-work/">Play as a team</a></h4>]]></content><author><name></name></author><summary type="html"><![CDATA[1. Hard to work with 2. We don’t have a staging environment 3. About building Blog DB 4. If you commit to nothing, you will be distracted by everything 5. Play as a team]]></summary></entry></feed>